//protoc --go_out=plugins=grpc:.. poker.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.2
// source: poker.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetWinRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players map[string]*GetWinRateRequest_Player `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetWinRateRequest) Reset() {
	*x = GetWinRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWinRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWinRateRequest) ProtoMessage() {}

func (x *GetWinRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWinRateRequest.ProtoReflect.Descriptor instead.
func (*GetWinRateRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0}
}

func (x *GetWinRateRequest) GetPlayers() map[string]*GetWinRateRequest_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type GetWinRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[string]float64 `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *GetWinRateResponse) Reset() {
	*x = GetWinRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWinRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWinRateResponse) ProtoMessage() {}

func (x *GetWinRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWinRateResponse.ProtoReflect.Descriptor instead.
func (*GetWinRateResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{1}
}

func (x *GetWinRateResponse) GetResult() map[string]float64 {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetWinRateRequest_Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num  int32  `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`
	Suit string `protobuf:"bytes,2,opt,name=Suit,proto3" json:"Suit,omitempty"`
}

func (x *GetWinRateRequest_Card) Reset() {
	*x = GetWinRateRequest_Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWinRateRequest_Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWinRateRequest_Card) ProtoMessage() {}

func (x *GetWinRateRequest_Card) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWinRateRequest_Card.ProtoReflect.Descriptor instead.
func (*GetWinRateRequest_Card) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GetWinRateRequest_Card) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GetWinRateRequest_Card) GetSuit() string {
	if x != nil {
		return x.Suit
	}
	return ""
}

type GetWinRateRequest_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Card1 *GetWinRateRequest_Card `protobuf:"bytes,2,opt,name=Card1,proto3" json:"Card1,omitempty"`
	Card2 *GetWinRateRequest_Card `protobuf:"bytes,3,opt,name=Card2,proto3" json:"Card2,omitempty"`
}

func (x *GetWinRateRequest_Player) Reset() {
	*x = GetWinRateRequest_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWinRateRequest_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWinRateRequest_Player) ProtoMessage() {}

func (x *GetWinRateRequest_Player) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWinRateRequest_Player.ProtoReflect.Descriptor instead.
func (*GetWinRateRequest_Player) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GetWinRateRequest_Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetWinRateRequest_Player) GetCard1() *GetWinRateRequest_Card {
	if x != nil {
		return x.Card1
	}
	return nil
}

func (x *GetWinRateRequest_Player) GetCard2() *GetWinRateRequest_Card {
	if x != nil {
		return x.Card2
	}
	return nil
}

var File_poker_proto protoreflect.FileDescriptor

var file_poker_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xfc, 0x02, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x2c, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x75, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x75, 0x69, 0x74, 0x1a, 0x90, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x31, 0x12, 0x38, 0x0a, 0x05,
	0x43, 0x61, 0x72, 0x64, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x32, 0x1a, 0x60, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x62,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_poker_proto_rawDescOnce sync.Once
	file_poker_proto_rawDescData = file_poker_proto_rawDesc
)

func file_poker_proto_rawDescGZIP() []byte {
	file_poker_proto_rawDescOnce.Do(func() {
		file_poker_proto_rawDescData = protoimpl.X.CompressGZIP(file_poker_proto_rawDescData)
	})
	return file_poker_proto_rawDescData
}

var file_poker_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_poker_proto_goTypes = []interface{}{
	(*GetWinRateRequest)(nil),        // 0: calculator.GetWinRateRequest
	(*GetWinRateResponse)(nil),       // 1: calculator.GetWinRateResponse
	(*GetWinRateRequest_Card)(nil),   // 2: calculator.GetWinRateRequest.Card
	(*GetWinRateRequest_Player)(nil), // 3: calculator.GetWinRateRequest.Player
	nil,                              // 4: calculator.GetWinRateRequest.PlayersEntry
	nil,                              // 5: calculator.GetWinRateResponse.ResultEntry
}
var file_poker_proto_depIdxs = []int32{
	4, // 0: calculator.GetWinRateRequest.Players:type_name -> calculator.GetWinRateRequest.PlayersEntry
	5, // 1: calculator.GetWinRateResponse.result:type_name -> calculator.GetWinRateResponse.ResultEntry
	2, // 2: calculator.GetWinRateRequest.Player.Card1:type_name -> calculator.GetWinRateRequest.Card
	2, // 3: calculator.GetWinRateRequest.Player.Card2:type_name -> calculator.GetWinRateRequest.Card
	3, // 4: calculator.GetWinRateRequest.PlayersEntry.value:type_name -> calculator.GetWinRateRequest.Player
	0, // 5: calculator.GetWinRateService.GetWinRate:input_type -> calculator.GetWinRateRequest
	1, // 6: calculator.GetWinRateService.GetWinRate:output_type -> calculator.GetWinRateResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_poker_proto_init() }
func file_poker_proto_init() {
	if File_poker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_poker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWinRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWinRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWinRateRequest_Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWinRateRequest_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_poker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_poker_proto_goTypes,
		DependencyIndexes: file_poker_proto_depIdxs,
		MessageInfos:      file_poker_proto_msgTypes,
	}.Build()
	File_poker_proto = out.File
	file_poker_proto_rawDesc = nil
	file_poker_proto_goTypes = nil
	file_poker_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GetWinRateServiceClient is the client API for GetWinRateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetWinRateServiceClient interface {
	GetWinRate(ctx context.Context, in *GetWinRateRequest, opts ...grpc.CallOption) (*GetWinRateResponse, error)
}

type getWinRateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetWinRateServiceClient(cc grpc.ClientConnInterface) GetWinRateServiceClient {
	return &getWinRateServiceClient{cc}
}

func (c *getWinRateServiceClient) GetWinRate(ctx context.Context, in *GetWinRateRequest, opts ...grpc.CallOption) (*GetWinRateResponse, error) {
	out := new(GetWinRateResponse)
	err := c.cc.Invoke(ctx, "/calculator.GetWinRateService/GetWinRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetWinRateServiceServer is the server API for GetWinRateService service.
type GetWinRateServiceServer interface {
	GetWinRate(context.Context, *GetWinRateRequest) (*GetWinRateResponse, error)
}

// UnimplementedGetWinRateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGetWinRateServiceServer struct {
}

func (*UnimplementedGetWinRateServiceServer) GetWinRate(context.Context, *GetWinRateRequest) (*GetWinRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWinRate not implemented")
}

func RegisterGetWinRateServiceServer(s *grpc.Server, srv GetWinRateServiceServer) {
	s.RegisterService(&_GetWinRateService_serviceDesc, srv)
}

func _GetWinRateService_GetWinRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWinRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetWinRateServiceServer).GetWinRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.GetWinRateService/GetWinRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetWinRateServiceServer).GetWinRate(ctx, req.(*GetWinRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetWinRateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.GetWinRateService",
	HandlerType: (*GetWinRateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWinRate",
			Handler:    _GetWinRateService_GetWinRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poker.proto",
}
